# Publish binaries

name: Publish binaries

on:
  push:
    tags:
      - '*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Get version name
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2

      - name: Cache Go modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Docker login GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Docker login Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: chillibits
          password: ${{ secrets.DOCKER_HUB_SECRET }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PACKAGE_SIGNING }}
          passphrase: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          version: v0.160.0
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          ARTIFACTORY_ALPINE_SECRET: ${{ secrets.ARTIFACTORY_API_KEY }}
          ARTIFACTORY_DEBIAN_SECRET: ${{ secrets.ARTIFACTORY_API_KEY }}
          ARTIFACTORY_RPM_SECRET: ${{ secrets.ARTIFACTORY_API_KEY }}
          NFPM_PUBLISH_DEB_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}
          NFPM_PUBLISH_RPM_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}
          NFPM_PUBLISH_APK_PASSPHRASE: ${{ secrets.GPG_PACKAGE_SIGNING_PASSPHRASE }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1
        env:
          JF_ARTIFACTORY_1: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Deploy to Alpine repository
        run: |
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.13/main/x86_64/compose-generator_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.12/main/x86_64/compose-generator_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.11/main/x86_64/compose-generator_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.apk" alpine/3.10/main/x86_64/compose-generator_${{ steps.get_version.outputs.version }}_amd64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.13/main/aarch64/compose-generator_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.12/main/aarch64/compose-generator_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.11/main/aarch64/compose-generator_${{ steps.get_version.outputs.version }}_arm64.apk
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.apk" alpine/3.10/main/aarch64/compose-generator_${{ steps.get_version.outputs.version }}_arm64.apk
      
      - name: Deploy to Debian repository
        run: |
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/amd64
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/arm64
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_armv5.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv5
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_armv6.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv6
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_armv7.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv7
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_armv8.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/armv8
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_386.deb" debian/pool/ --deb buster,stretch,jessie,wheezy,trusty,xenial,bionic,focal,groovy/main/i386
      
      - name: Deploy to RPM repository
        run: |
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_amd64.rpm" rpm/x86_64/stable/compose-generator/${{ steps.get_version.outputs.version }}/compose-generator_${{ steps.get_version.outputs.version }}_amd64.rpm
          jfrog rt u "dist/compose-generator_${{ steps.get_version.outputs.version }}_linux_arm64.rpm" rpm/aarch64/stable/compose-generator/${{ steps.get_version.outputs.version }}/compose-generator_${{ steps.get_version.outputs.version }}_arm64.rpm

      - name: Download EnVar plugin for NSIS
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip
          file-name: envar_plugin.zip
          location: ${{ github.workspace }}
      
      - name: Extract EnVar plugin
        run: 7z x -o"${{ github.workspace }}/NSIS_Plugins" "${{ github.workspace }}/envar_plugin.zip"
      
      - name: Install makensis
        run: sudo apt-get update && sudo apt-get install -y nsis nsis-pluginapi
      
      - name: Set plugin permissions
        run: sudo chown -R $(whoami) /usr/share/nsis/Plugins/
      
      - name: Create NSIS installer - amd64
        uses: joncloud/makensis-action@v3.4
        with:
          additional-plugin-paths: ${{ github.workspace }}/NSIS_Plugins/Plugins
        env:
          VERSION: ${{ github.event.release.tag_name }}
          ARCH: amd64
      
      - name: Upload NSIS installer - amd64
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: compose-generator.exe
          asset_name: ComposeGenerator_${{ steps.get_version.outputs.version }}_x64_Setup.exe
          tag: ${{ github.ref }}
      
      - name: Create NSIS installer - i386
        uses: joncloud/makensis-action@v3.4
        with:
          additional-plugin-paths: ${{ github.workspace }}/NSIS_Plugins/Plugins
        env:
          VERSION: ${{ github.event.release.tag_name }}
          ARCH: 386
      
      - name: Upload NSIS installer - i386
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: compose-generator.exe
          asset_name: ComposeGenerator_${{ steps.get_version.outputs.version }}_x86_Setup.exe
          tag: ${{ github.ref }}

      - name: Create predefined services archive
        run: |
          cd ./predefined-services
          tar cfvz ../predefined-services.tar.gz *

      - name: Upload predefined services archive
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: predefined-services.tar.gz
          asset_name: predefined-services.tar.gz
          tag: ${{ github.ref }}